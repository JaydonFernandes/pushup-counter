{"version":3,"sources":["logo.svg","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","useState","currentPushups","setCurrentPushups","localStorage","getItem","maxPushups","setMaxPushups","isComplete","setIsComplete","pushupTimeRemaining","setPushupTimeRemaining","visualTimer","setVisualTimer","tap","event","document","removeEventListener","subtractSecond","useEffect","setItem","clearTimeout","console","log","setTimeout","className","onClick","style","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.99f06a96.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\r\nimport { useState, useEffect } from \"react\";\r\nimport { Timer } from 'easytimer.js';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n\r\n  const [currentPushups, setCurrentPushups] = useState(0);\r\n  const [maxPushups, setMaxPushups] = useState(localStorage.getItem('maxPushups') ? localStorage.getItem('maxPushups'): 0);\r\n  const [isComplete, setIsComplete] = useState(0);\r\n  const [pushupTimeRemaining, setPushupTimeRemaining] = useState(3)\r\n  const [visualTimer, setVisualTimer] = useState(0)\r\n\r\n  \r\n\r\n  function tap(event){\r\n    document.removeEventListener('click', tap, true);\r\n    if(isComplete == 0){\r\n      setPushupTimeRemaining(3);\r\n      setCurrentPushups(currentPushups + 1)\r\n    }\r\n  }\r\n\r\n  function subtractSecond(){\r\n    setPushupTimeRemaining(pushupTimeRemaining - 1)\r\n  }\r\n\r\n  useEffect( ()=>{\r\n    if (currentPushups > maxPushups){\r\n      setMaxPushups(currentPushups)\r\n      localStorage.setItem('maxPushups', currentPushups);\r\n    }\r\n  },[currentPushups])\r\n\r\n  useEffect( ()=>{\r\n    document.removeEventListener('click', tap, true);\r\n    clearTimeout(visualTimer)\r\n    console.log(\"Done\")\r\n    console.log(\"isComplete: \"+ isComplete)\r\n    \r\n  },[isComplete])\r\n\r\n  useEffect( ()=>{\r\n\r\n    clearTimeout(visualTimer)\r\n\r\n    // document.addEventListener('click', (tap), true); \r\n\r\n    if (pushupTimeRemaining > 0){\r\n      setVisualTimer(setTimeout(subtractSecond, 1000));\r\n    }else{\r\n      setIsComplete(1)\r\n      document.removeEventListener('click', tap, true);\r\n    }\r\n    \r\n    \r\n  },[pushupTimeRemaining])\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"App\" onClick={tap} style={{height: \"100vh\"}}>\r\n      <h1>Max Pushups: {maxPushups}</h1>\r\n      <h1>Current Pushups: {currentPushups}</h1>\r\n      <h1>{pushupTimeRemaining}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}